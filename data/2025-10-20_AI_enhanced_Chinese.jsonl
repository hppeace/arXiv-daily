{"id": "2510.15542", "categories": ["cs.NE", "cs.LG", "q-bio.NC"], "pdf": "https://arxiv.org/pdf/2510.15542", "abs": "https://arxiv.org/abs/2510.15542", "authors": ["Ivan Kartashov", "Mariia Pushkareva", "Iakov Karandashev"], "title": "SpikeFit: Towards Optimal Deployment of Spiking Networks on Neuromorphic Hardware", "comment": "13 pages, 2 figures. Work in progress", "summary": "This paper introduces SpikeFit, a novel training method for Spiking Neural\nNetworks (SNNs) that enables efficient inference on neuromorphic hardware,\nconsidering all its stringent requirements: the number of neurons and synapses\nthat can fit on a single device, and lower bit-width representations (e.g.,\n4-bit, 8-bit). Unlike conventional compressing approaches that address only a\nsubset of these requirements (limited numerical precision and limited number of\nneurons in the network), SpikeFit treats the allowed weights' discrete values\nthemselves as learnable parameters co-optimized with the model, allowing for\noptimal Clusterization-Aware Training (CAT) of the model's weights at low\nprecision (2-, 4-, or 8-bit) which results in higher network compression\nefficiency, as well as limiting the number of unique synaptic connections to a\nvalue required by neuromorphic processor. This joint optimization allows\nSpikeFit to find a discrete weight set aligned with hardware constraints,\nenabling the most complete deployment across a broader range of neuromorphic\nprocessors than existing methods of SNN compression support. Moreover, SpikeFit\nintroduces a new hardware-friendly Fisher Spike Contribution (FSC) pruning\nmethod showing the state-of-the-art performance. We demonstrate that for\nspiking neural networks constrained to only four unique synaptic weight values\n(M = 4), our SpikeFit method not only outperforms state-of-the-art SNNs\ncompression methods and conventional baselines combining extreme quantization\nschemes and clustering algorithms, but also meets a wider range of neuromorphic\nhardware requirements and provides the lowest energy use in experiments.", "AI": {"tldr": "SpikeFit\u662f\u4e00\u79cd\u65b0\u9896\u7684\u8109\u51b2\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u65b9\u6cd5\uff0c\u901a\u8fc7\u8054\u5408\u4f18\u5316\u79bb\u6563\u6743\u91cd\u96c6\u4e0e\u786c\u4ef6\u7ea6\u675f\uff0c\u5b9e\u73b0\u4e86\u5728\u795e\u7ecf\u5f62\u6001\u786c\u4ef6\u4e0a\u7684\u9ad8\u6548\u63a8\u7406\uff0c\u540c\u65f6\u6ee1\u8db3\u795e\u7ecf\u5143\u6570\u91cf\u3001\u7a81\u89e6\u8fde\u63a5\u6570\u548c\u4f4e\u6bd4\u7279\u4f4d\u5bbd\u8868\u793a\u7b49\u4e25\u683c\u786c\u4ef6\u8981\u6c42\u3002", "motivation": "\u73b0\u6709\u8109\u51b2\u795e\u7ecf\u7f51\u7edc\u538b\u7f29\u65b9\u6cd5\u4ec5\u80fd\u89e3\u51b3\u6570\u503c\u7cbe\u5ea6\u53d7\u9650\u6216\u7f51\u7edc\u795e\u7ecf\u5143\u6570\u91cf\u53d7\u9650\u7b49\u90e8\u5206\u786c\u4ef6\u7ea6\u675f\u95ee\u9898\uff0c\u65e0\u6cd5\u5168\u9762\u6ee1\u8db3\u795e\u7ecf\u5f62\u6001\u5904\u7406\u5668\u5bf9\u795e\u7ecf\u5143\u6570\u91cf\u3001\u7a81\u89e6\u8fde\u63a5\u6570\u548c\u4f4e\u6bd4\u7279\u4f4d\u5bbd\u8868\u793a\u7684\u591a\u91cd\u4e25\u683c\u8981\u6c42\uff0c\u9650\u5236\u4e86SNN\u5728\u591a\u6837\u5316\u795e\u7ecf\u5f62\u6001\u786c\u4ef6\u4e0a\u7684\u5b8c\u6574\u90e8\u7f72\u3002", "method": "SpikeFit\u63d0\u51fa\u5c06\u5141\u8bb8\u7684\u6743\u91cd\u79bb\u6563\u503c\u672c\u8eab\u4f5c\u4e3a\u53ef\u5b66\u4e60\u53c2\u6570\u4e0e\u6a21\u578b\u5171\u540c\u4f18\u5316\uff0c\u5b9e\u73b0\u4f4e\u7cbe\u5ea6\uff082\u4f4d\u30014\u4f4d\u62168\u4f4d\uff09\u4e0b\u7684\u6700\u4f18\u805a\u7c7b\u611f\u77e5\u8bad\u7ec3\uff0c\u540c\u65f6\u5f15\u5165\u786c\u4ef6\u53cb\u597d\u7684Fisher\u8109\u51b2\u8d21\u732e\u526a\u679d\u65b9\u6cd5\uff0c\u9650\u5236\u552f\u4e00\u7a81\u89e6\u8fde\u63a5\u6570\u91cf\u4ee5\u9002\u5e94\u795e\u7ecf\u5f62\u6001\u5904\u7406\u5668\u7684\u8981\u6c42\u3002", "result": "\u5728\u4ec5\u5141\u8bb8\u56db\u4e2a\u552f\u4e00\u7a81\u89e6\u6743\u91cd\u503c\uff08M=4\uff09\u7684\u7ea6\u675f\u4e0b\uff0cSpikeFit\u4e0d\u4ec5\u8d85\u8d8a\u4e86\u73b0\u6709\u6700\u5148\u8fdb\u7684SNN\u538b\u7f29\u65b9\u6cd5\u548c\u4f20\u7edf\u57fa\u7ebf\u65b9\u6cd5\uff0c\u8fd8\u6ee1\u8db3\u4e86\u66f4\u5e7f\u6cdb\u7684\u795e\u7ecf\u5f62\u6001\u786c\u4ef6\u8981\u6c42\uff0c\u5728\u5b9e\u9a8c\u4e2d\u5b9e\u73b0\u4e86\u6700\u4f4e\u7684\u80fd\u8017\u4f7f\u7528\u3002", "conclusion": "\u8be5\u7814\u7a76\u8868\u660e\u8054\u5408\u4f18\u5316\u79bb\u6563\u6743\u91cd\u96c6\u4e0e\u786c\u4ef6\u7ea6\u675f\u7684\u65b9\u6cd5\u80fd\u591f\u5b9e\u73b0\u66f4\u9ad8\u6548\u7684\u7f51\u7edc\u538b\u7f29\uff0c\u4e3a\u8109\u51b2\u795e\u7ecf\u7f51\u7edc\u5728\u591a\u6837\u5316\u795e\u7ecf\u5f62\u6001\u5904\u7406\u5668\u4e0a\u7684\u5b8c\u6574\u90e8\u7f72\u63d0\u4f9b\u4e86\u6709\u6548\u89e3\u51b3\u65b9\u6848\uff0c\u540c\u65f6\u63d0\u51fa\u7684FSC\u526a\u679d\u65b9\u6cd5\u5c55\u73b0\u4e86\u6700\u5148\u8fdb\u7684\u6027\u80fd\u8868\u73b0\u3002"}}
